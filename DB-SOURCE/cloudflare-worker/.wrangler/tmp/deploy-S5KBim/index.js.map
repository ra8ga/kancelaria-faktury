{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "/Users/rafalfurmaga/Downloads/kancelaria-faktury/DB-SOURCE/cloudflare-worker/.wrangler/tmp/deploy-S5KBim",
  "sourcesContent": ["export default {\n  async fetch(req, env, ctx) {\n    const url = new URL(req.url);\n    const db = env.ARCHIWUM_DB;\n\n    // Basic CORS support\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    };\n    if (req.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    // Health check\n    if (url.pathname === '/health') {\n      return jsonResponse({ ok: true }, 200, corsHeaders);\n    }\n\n    // Companies summary endpoint\n    if (url.pathname === '/api/companies_summary') {\n      try {\n        const results = await getCompaniesSummary(db);\n        return jsonResponse(results, 200, corsHeaders);\n      } catch (e) {\n        return jsonResponse({ error: e.message }, 500, corsHeaders);\n      }\n    }\n\n    // Database statistics\n    if (url.pathname === '/api/database/stats') {\n      try {\n        const results = await getDatabaseStats(db);\n        return jsonResponse(results, 200, corsHeaders);\n      } catch (e) {\n        return jsonResponse({ error: e.message }, 500, corsHeaders);\n      }\n    }\n\n    // All companies\n    if (url.pathname === '/api/companies') {\n      try {\n        const results = await getAllCompanies(db);\n        return jsonResponse(results, 200, corsHeaders);\n      } catch (e) {\n        return jsonResponse({ error: e.message }, 500, corsHeaders);\n      }\n    }\n\n    // Company specific endpoints\n    const companyMatch = url.pathname.match(/^\\/api\\/companies\\/([^\\/]+)/);\n    if (companyMatch) {\n      const companyId = companyMatch[1];\n\n      // Company details\n      if (url.pathname === `/api/companies/${companyId}`) {\n        try {\n          const results = await getCompanyDetails(db, companyId);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      // Company summary\n      if (url.pathname === `/api/companies/${companyId}/summary`) {\n        try {\n          const results = await getCompanyFinancialSummary(db, companyId);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      // Documents endpoints\n      if (url.pathname === `/api/companies/${companyId}/documents`) {\n        try {\n          const limit = parseInt(url.searchParams.get('limit') || '50');\n          const offset = parseInt(url.searchParams.get('offset') || '0');\n          const results = await getCompanyDocuments(db, companyId, limit, offset);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      if (url.pathname === `/api/companies/${companyId}/documents/vat`) {\n        try {\n          const limit = parseInt(url.searchParams.get('limit') || '50');\n          const results = await getCompanyVATDocuments(db, companyId, limit);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      if (url.pathname === `/api/companies/${companyId}/documents/tow`) {\n        try {\n          const limit = parseInt(url.searchParams.get('limit') || '50');\n          const results = await getCompanyTOWDocuments(db, companyId, limit);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      // Contractors endpoints\n      if (url.pathname === `/api/companies/${companyId}/contractors`) {\n        try {\n          const limit = parseInt(url.searchParams.get('limit') || '100');\n          const search = url.searchParams.get('search') || '';\n          const results = await getCompanyContractors(db, companyId, limit, search);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      if (url.pathname === `/api/companies/${companyId}/contractors/geography`) {\n        try {\n          const results = await getCompanyContractorsGeography(db, companyId);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      // Products endpoints\n      if (url.pathname === `/api/companies/${companyId}/products`) {\n        try {\n          const limit = parseInt(url.searchParams.get('limit') || '100');\n          const search = url.searchParams.get('search') || '';\n          const results = await getCompanyProducts(db, companyId, limit, search);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      if (url.pathname === `/api/companies/${companyId}/products/categories`) {\n        try {\n          const results = await getCompanyProductCategories(db, companyId);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      // Financial endpoints\n      if (url.pathname === `/api/companies/${companyId}/financial/payments`) {\n        try {\n          const unpaid = url.searchParams.get('unpaid') === 'true';\n          const results = await getCompanyPayments(db, companyId, unpaid);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      if (url.pathname === `/api/companies/${companyId}/financial/vat/rates`) {\n        try {\n          const results = await getCompanyVATRates(db, companyId);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      // Warehouses endpoints\n      if (url.pathname === `/api/companies/${companyId}/warehouses`) {\n        try {\n          const results = await getCompanyWarehouses(db, companyId);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      // Search endpoints\n      if (url.pathname === `/api/companies/${companyId}/search/global`) {\n        try {\n          const query = url.searchParams.get('q') || '';\n          const results = await globalSearch(db, companyId, query);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      // Dictionary endpoints\n      if (url.pathname === `/api/companies/${companyId}/dict/payment-types`) {\n        try {\n          const results = await getPaymentTypes(db, companyId);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n\n      if (url.pathname === `/api/companies/${companyId}/dict/vat-rates`) {\n        try {\n          const results = await getVATRates(db, companyId);\n          return jsonResponse(results, 200, corsHeaders);\n        } catch (e) {\n          return jsonResponse({ error: e.message }, 500, corsHeaders);\n        }\n      }\n    }\n\n    // Swagger documentation endpoints\n    if (url.pathname === '/swagger.yaml' || url.pathname === '/openapi.yaml') {\n      const swaggerYaml = `openapi: 3.0.3\ninfo:\n  title: Archiwum API\n  description: REST API for accessing historical company data from migrated SQL Server databases.\n  version: 1.0.0\nservers:\n  - url: http://archiwum-worker.ra8ga-archiwum.workers.dev\n    description: Production server\npaths:\n  /health:\n    get:\n      summary: Health Check\n      tags: [Health]\n      responses:\n        '200':\n          description: API is healthy\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  ok:\n                    type: boolean\n              example:\n                ok: true\n  /api/companies_summary:\n    get:\n      summary: Get Companies Summary\n      description: Returns summary of all companies with key metrics\n      tags: [Companies]\n      responses:\n        '200':\n          description: Successfully retrieved companies summary\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    db_name:\n                      type: string\n                    nazwa:\n                      type: string\n                    nip:\n                      type: string\n                    regon:\n                      type: string\n                    miasto:\n                      type: string\n                    ulica:\n                      type: string\n                    kod:\n                      type: string\n                    kontrahenci_count:\n                      type: integer\n                    dokumenty_count:\n                      type: integer\ncomponents:\n  schemas:\n    CompanySummary:\n      type: object\n      properties:\n        db_name: {type: string}\n        nazwa: {type: string}\n        nip: {type: string}\n        regon: {type: string}\n        miasto: {type: string}\n        ulica: {type: string}\n        kod: {type: string}\n        kontrahenci_count: {type: integer}\n        dokumenty_count: {type: integer}\ntags:\n  - name: Health\n  - name: Companies`;\n      return new Response(swaggerYaml, {\n        headers: { 'Content-Type': 'application/x-yaml', ...corsHeaders }\n      });\n    }\n\n    if (url.pathname === '/swagger' || url.pathname === '/') {\n      const swaggerHtml = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Archiwum API - Swagger Documentation</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css\" />\n    <style>\n        html { box-sizing: border-box; overflow: -moz-scrollbars-vertical; overflow-y: scroll; }\n        *, *:before, *:after { box-sizing: inherit; }\n        body { margin:0; background: #fafafa; }\n        .header {\n            background: #2c3e50;\n            color: white;\n            padding: 20px;\n            text-align: center;\n        }\n        .header h1 {\n            margin: 0;\n            font-size: 24px;\n        }\n        .header p {\n            margin: 10px 0 0 0;\n            opacity: 0.8;\n        }\n        .api-info {\n            background: #e74c3c;\n            color: white;\n            padding: 15px;\n            margin: 20px;\n            border-radius: 5px;\n            text-align: center;\n        }\n        .api-info strong {\n            display: block;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>\uD83C\uDFDB\uFE0F Archiwum API</h1>\n        <p>REST API for Historical Company Data</p>\n    </div>\n\n    <div class=\"api-info\">\n        <strong>\uD83D\uDE80 Live API Base URL:</strong>\n        <code>http://archiwum-worker.ra8ga-archiwum.workers.dev</code>\n        <br>\n        <small>Note: HTTP only (not HTTPS) for workers.dev subdomains</small>\n    </div>\n\n    <div id=\"swagger-ui\"></div>\n\n    <script src=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js\"></script>\n    <script src=\"https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-standalone-preset.js\"></script>\n    <script>\n        window.onload = function() {\n            SwaggerUIBundle({\n                url: '/swagger.yaml',\n                dom_id: '#swagger-ui',\n                deepLinking: true,\n                presets: [\n                    SwaggerUIBundle.presets.apis,\n                    SwaggerUIStandalonePreset\n                ],\n                plugins: [\n                    SwaggerUIBundle.plugins.DownloadUrl\n                ],\n                layout: \"StandaloneLayout\",\n                defaultModelsExpandDepth: 1,\n                displayRequestDuration: true\n            });\n        }\n    </script>\n</body>\n</html>`;\n      return new Response(swaggerHtml, {\n        headers: { 'Content-Type': 'text/html', ...corsHeaders }\n      });\n    }\n\n    return new Response('Not Found', { status: 404, headers: corsHeaders });\n  }\n};\n\nasync function getCompaniesSummary(db) {\n  // Znajd\u017A tabele FIRMA\n  const { results: firmaTables } = await db\n    .prepare(\"SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%_firma_dbo_FIRMA' ORDER BY name\")\n    .all();\n\n  const companies = [];\n  for (const row of firmaTables) {\n    const table = row.name;\n    const dbName = table.replace('_firma_dbo_FIRMA', '');\n\n    // Dane firmy\n    const { results: frows } = await db\n      .prepare(`SELECT NAZWA, NIP, REGON FROM \"${table}\" LIMIT 1`)\n      .all();\n\n    if (!frows || frows.length === 0) continue;\n\n    // Adres (opcjonalnie)\n    const addrTable = `${dbName}_firma_dbo_ADRESY`;\n    let miasto = null, ulica = null, kod = null;\n    try {\n      const { results: arows } = await db\n        .prepare(`SELECT MIASTO, ULICA, KOD FROM \"${addrTable}\" LIMIT 1`)\n        .all();\n      if (arows && arows.length) {\n        miasto = arows[0].MIASTO ?? null;\n        ulica = arows[0].ULICA ?? null;\n        kod = arows[0].KOD ?? null;\n      }\n    } catch (_) {}\n\n    // Liczba kontrahent\u00F3w\n    const kontrTable = `${dbName}_firma_dbo_SlwKONTRAHENT`;\n    let kontrahenciCount = 0;\n    try {\n      const { results: krows } = await db\n        .prepare(`SELECT COUNT(*) AS cnt FROM \"${kontrTable}\"`)\n        .all();\n      kontrahenciCount = (krows && krows.length) ? krows[0].cnt : 0;\n    } catch (_) {}\n\n    // Liczba dokument\u00F3w\n    const dokTable = `${dbName}_Magazyn_dbo_dokTOW`;\n    let dokumentyCount = 0;\n    try {\n      const { results: drows } = await db\n        .prepare(`SELECT COUNT(*) AS cnt FROM \"${dokTable}\"`)\n        .all();\n      dokumentyCount = (drows && drows.length) ? drows[0].cnt : 0;\n    } catch (_) {}\n\n    companies.push({\n      db_name: dbName,\n      nazwa: frows[0].NAZWA,\n      nip: frows[0].NIP,\n      regon: frows[0].REGON,\n      miasto,\n      ulica,\n      kod,\n      kontrahenci_count: kontrahenciCount,\n      dokumenty_count: dokumentyCount\n    });\n  }\n\n  return companies;\n}\n\nasync function getDatabaseStats(db) {\n  const { results: totalTables } = await db\n    .prepare(\"SELECT COUNT(*) as count FROM sqlite_master WHERE type='table' AND name NOT LIKE '_%'\")\n    .all();\n\n  const { results: companyTables } = await db\n    .prepare(\"SELECT COUNT(*) as count FROM sqlite_master WHERE type='table' AND name LIKE '%_firma_dbo_FIRMA'\")\n    .all();\n\n  return {\n    total_tables: totalTables[0]?.count || 0,\n    total_companies: companyTables[0]?.count || 0,\n    database_size: \"~2MB\",\n    last_updated: new Date().toISOString()\n  };\n}\n\nasync function getAllCompanies(db) {\n  return await getCompaniesSummary(db);\n}\n\nasync function getCompanyDetails(db, companyId) {\n  const firmaTable = `${companyId}_firma_dbo_FIRMA`;\n  const adresTable = `${companyId}_firma_dbo_ADRESY`;\n\n  try {\n    const { results: companyData } = await db\n      .prepare(`SELECT * FROM \"${firmaTable}\" LIMIT 1`)\n      .all();\n\n    let addressData = null;\n    try {\n      const { results: address } = await db\n        .prepare(`SELECT * FROM \"${adresTable}\" LIMIT 1`)\n        .all();\n      addressData = address[0] || null;\n    } catch (_) {}\n\n    return {\n      company: companyData[0] || null,\n      address: addressData,\n      db_name: companyId\n    };\n  } catch (e) {\n    throw new Error(`Company ${companyId} not found`);\n  }\n}\n\nasync function getCompanyFinancialSummary(db, companyId) {\n  const vatTable = `${companyId}_Magazyn_dbo_dokVAT`;\n  const towTable = `${companyId}_Magazyn_dbo_dokTOW`;\n  const kontrTable = `${companyId}_firma_dbo_SlwKONTRAHENT`;\n\n  let summary = {\n    total_documents: 0,\n    vat_documents: 0,\n    tow_documents: 0,\n    contractors: 0,\n    total_netto: 0,\n    total_brutto: 0,\n    total_vat: 0\n  };\n\n  try {\n    // VAT documents\n    const { results: vatData } = await db\n      .prepare(`SELECT COUNT(*) as count, SUM(CAST(COALESCE(n23, 0) AS REAL)) as netto, SUM(CAST(COALESCE(b23, 0) AS REAL)) as brutto FROM \"${vatTable}\"`)\n      .all();\n\n    if (vatData.length > 0) {\n      summary.vat_documents = vatData[0].count || 0;\n      summary.total_netto = vatData[0].netto || 0;\n      summary.total_brutto = vatData[0].brutto || 0;\n    }\n\n    // TOW documents\n    const { results: towData } = await db\n      .prepare(`SELECT COUNT(*) as count FROM \"${towTable}\"`)\n      .all();\n\n    if (towData.length > 0) {\n      summary.tow_documents = towData[0].count || 0;\n    }\n\n    // Contractors\n    const { results: kontrData } = await db\n      .prepare(`SELECT COUNT(*) as count FROM \"${kontrTable}\"`)\n      .all();\n\n    if (kontrData.length > 0) {\n      summary.contractors = kontrData[0].count || 0;\n    }\n\n    summary.total_documents = summary.vat_documents + summary.tow_documents;\n    summary.total_vat = summary.total_brutto - summary.total_netto;\n\n  } catch (_) {}\n\n  return summary;\n}\n\nasync function getCompanyDocuments(db, companyId, limit = 50, offset = 0) {\n  const vatTable = `${companyId}_Magazyn_dbo_dokVAT`;\n  const towTable = `${companyId}_Magazyn_dbo_dokTOW`;\n\n  const documents = [];\n\n  try {\n    // Get VAT documents\n    const { results: vatDocs } = await db\n      .prepare(`SELECT 'VAT' as type, ID, DATA_DOK, WARTOSC_NETTO, WARTOSC_BRUTTO, KONTRAHENT_NAZWA, NR_ROZ FROM \"${vatTable}\" ORDER BY DATA_DOK DESC LIMIT ${limit} OFFSET ${offset}`)\n      .all();\n\n    documents.push(...vatDocs);\n  } catch (_) {}\n\n  try {\n    // Get TOW documents\n    const { results: towDocs } = await db\n      .prepare(`SELECT 'TOW' as type, ID, DATA_DOK, WARTOSC_NETTO, WARTOSC_BRUTTO, KONTRAHENT_NAZWA, NR_ROZ FROM \"${towTable}\" ORDER BY DATA_DOK DESC LIMIT ${limit} OFFSET ${offset}`)\n      .all();\n\n    documents.push(...towDocs);\n  } catch (_) {}\n\n  return documents;\n}\n\nasync function getCompanyVATDocuments(db, companyId, limit = 50) {\n  const vatTable = `${companyId}_Magazyn_dbo_dokVAT`;\n\n  try {\n    const { results: docs } = await db\n      .prepare(`SELECT * FROM \"${vatTable}\" ORDER BY DATA_DOK DESC LIMIT ${limit}`)\n      .all();\n    return docs;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function getCompanyTOWDocuments(db, companyId, limit = 50) {\n  const towTable = `${companyId}_Magazyn_dbo_dokTOW`;\n\n  try {\n    const { results: docs } = await db\n      .prepare(`SELECT * FROM \"${towTable}\" ORDER BY DATA_DOK DESC LIMIT ${limit}`)\n      .all();\n    return docs;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function getCompanyContractors(db, companyId, limit = 100, search = '') {\n  const kontrTable = `${companyId}_firma_dbo_SlwKONTRAHENT`;\n\n  let query = `SELECT * FROM \"${kontrTable}\"`;\n  if (search) {\n    query += ` WHERE NAZWA LIKE '%${search}%' OR MIASTO LIKE '%${search}%' OR NIP LIKE '%${search}%'`;\n  }\n  query += ` ORDER BY NAZWA LIMIT ${limit}`;\n\n  try {\n    const { results: contractors } = await db.prepare(query).all();\n    return contractors;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function getCompanyContractorsGeography(db, companyId) {\n  const kontrTable = `${companyId}_firma_dbo_SlwKONTRAHENT`;\n\n  try {\n    const { results: geography } = await db\n      .prepare(`SELECT MIASTO, COUNT(*) as count FROM \"${kontrTable}\" WHERE MIASTO IS NOT NULL AND MIASTO != '' GROUP BY MIASTO ORDER BY count DESC`)\n      .all();\n    return geography;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function getCompanyProducts(db, companyId, limit = 100, search = '') {\n  const productsTable = `${companyId}_Magazyn_dbo_slwTOWARY`;\n\n  let query = `SELECT * FROM \"${productsTable}\"`;\n  if (search) {\n    query += ` WHERE NAZWA LIKE '%${search}%' OR SYMBOL LIKE '%${search}%'`;\n  }\n  query += ` ORDER BY NAZWA LIMIT ${limit}`;\n\n  try {\n    const { results: products } = await db.prepare(query).all();\n    return products;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function getCompanyProductCategories(db, companyId) {\n  const categoriesTable = `${companyId}_Magazyn_dbo_slwDok_Kategorie`;\n\n  try {\n    const { results: categories } = await db\n      .prepare(`SELECT * FROM \"${categoriesTable}\" ORDER BY NAZWA`)\n      .all();\n    return categories;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function getCompanyPayments(db, companyId, unpaidOnly = false) {\n  const paymentsTable = `${companyId}_Magazyn_dbo_PLATNOSCI`;\n\n  let query = `SELECT * FROM \"${paymentsTable}\"`;\n  if (unpaidOnly) {\n    query += ` WHERE ROZLICZONY = 0 OR ROZLICZONY IS NULL`;\n  }\n  query += ` ORDER BY DATA_PLATNOSCI DESC LIMIT 100`;\n\n  try {\n    const { results: payments } = await db.prepare(query).all();\n    return payments;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function getCompanyVATRates(db, companyId) {\n  const vatTable = `${companyId}_Magazyn_dbo_slwStawkiVAT`;\n\n  try {\n    const { results: rates } = await db\n      .prepare(`SELECT * FROM \"${vatTable}\" ORDER BY STAWKA`)\n      .all();\n    return rates;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function getCompanyWarehouses(db, companyId) {\n  const warehousesTable = `${companyId}_Magazyn_dbo_slwMagazyny`;\n\n  try {\n    const { results: warehouses } = await db\n      .prepare(`SELECT * FROM \"${warehousesTable}\" ORDER BY NAZWA`)\n      .all();\n    return warehouses;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function globalSearch(db, companyId, query) {\n  if (!query || query.length < 2) return { results: [], total: 0 };\n\n  const results = {\n    contractors: [],\n    products: [],\n    documents: [],\n    total: 0\n  };\n\n  // Search contractors\n  try {\n    const { results: contractors } = await db\n      .prepare(`SELECT 'contractor' as type, ID, NAZWA, MIASTO, NIP FROM \"${companyId}_firma_dbo_SlwKONTRAHENT\" WHERE NAZWA LIKE '%${query}%' OR NIP LIKE '%${query}%' LIMIT 20`)\n      .all();\n    results.contractors = contractors;\n  } catch (_) {}\n\n  // Search products\n  try {\n    const { results: products } = await db\n      .prepare(`SELECT 'product' as type, ID, NAZWA, SYMBOL FROM \"${companyId}_Magazyn_dbo_slwTOWARY\" WHERE NAZWA LIKE '%${query}%' OR SYMBOL LIKE '%${query}%' LIMIT 20`)\n      .all();\n    results.products = products;\n  } catch (_) {}\n\n  // Search documents\n  try {\n    const { results: documents } = await db\n      .prepare(`SELECT 'document' as type, ID, NR_ROZ, KONTRAHENT_NAZWA, DATA_DOK FROM \"${companyId}_Magazyn_dbo_dokVAT\" WHERE NR_ROZ LIKE '%${query}%' OR KONTRAHENT_NAZWA LIKE '%${query}%' LIMIT 20`)\n      .all();\n    results.documents = documents;\n  } catch (_) {}\n\n  results.total = results.contractors.length + results.products.length + results.documents.length;\n  return results;\n}\n\nasync function getPaymentTypes(db, companyId) {\n  const table = `${companyId}_Magazyn_dbo_DICT_PLATNOSCI_TYPY`;\n\n  try {\n    const { results: types } = await db\n      .prepare(`SELECT * FROM \"${table}\" ORDER BY NAZWA`)\n      .all();\n    return types;\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function getVATRates(db, companyId) {\n  return await getCompanyVATRates(db, companyId);\n}\n\nfunction jsonResponse(data, status = 200, headers = {}) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: { 'Content-Type': 'application/json', ...headers }\n  });\n}"],
  "mappings": "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",
  "names": []
}
