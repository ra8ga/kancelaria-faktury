{
  "version": 3,
  "sources": ["../../../src/index.js", "../../../../../../../.nvm/versions/node/v23.6.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../bundle-4nNZvF/middleware-insertion-facade.js", "../../../../../../../.nvm/versions/node/v23.6.0/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-4nNZvF/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/rafalfurmaga/Downloads/kancelaria-faktury/DB-SOURCE/cloudflare-worker/.wrangler/tmp/dev-ebGj7W",
  "sourcesContent": ["export default {\n  async fetch(req, env, ctx) {\n    const url = new URL(req.url);\n    const db = env.ARCHIWUM_DB;\n\n    // Basic CORS support\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    };\n    if (req.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    // Health check\n    if (url.pathname === '/health') {\n      return jsonResponse({ ok: true }, 200, corsHeaders);\n    }\n\n    // Companies summary endpoint\n    if (url.pathname === '/api/companies_summary') {\n      try {\n        const results = await getCompaniesSummary(db);\n        return jsonResponse(results, 200, corsHeaders);\n      } catch (e) {\n        return jsonResponse({ error: e.message }, 500, corsHeaders);\n      }\n    }\n\n    return new Response('Not Found', { status: 404, headers: corsHeaders });\n  }\n};\n\nasync function getCompaniesSummary(db) {\n  // Znajd\u017A tabele FIRMA\n  const { results: firmaTables } = await db\n    .prepare(\"SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%_firma_dbo_FIRMA' ORDER BY name\")\n    .all();\n\n  const companies = [];\n  for (const row of firmaTables) {\n    const table = row.name;\n    const dbName = table.replace('_firma_dbo_FIRMA', '');\n\n    // Dane firmy\n    const { results: frows } = await db\n      .prepare(`SELECT NAZWA, NIP, REGON FROM \"${table}\" LIMIT 1`)\n      .all();\n\n    if (!frows || frows.length === 0) continue;\n\n    // Adres (opcjonalnie)\n    const addrTable = `${dbName}_firma_dbo_ADRESY`;\n    let miasto = null, ulica = null, kod = null;\n    try {\n      const { results: arows } = await db\n        .prepare(`SELECT MIASTO, ULICA, KOD FROM \"${addrTable}\" LIMIT 1`)\n        .all();\n      if (arows && arows.length) {\n        miasto = arows[0].MIASTO ?? null;\n        ulica = arows[0].ULICA ?? null;\n        kod = arows[0].KOD ?? null;\n      }\n    } catch (_) {}\n\n    // Liczba kontrahent\u00F3w\n    const kontrTable = `${dbName}_firma_dbo_SlwKONTRAHENT`;\n    let kontrahenciCount = 0;\n    try {\n      const { results: krows } = await db\n        .prepare(`SELECT COUNT(*) AS cnt FROM \"${kontrTable}\"`)\n        .all();\n      kontrahenciCount = (krows && krows.length) ? krows[0].cnt : 0;\n    } catch (_) {}\n\n    // Liczba dokument\u00F3w\n    const dokTable = `${dbName}_Magazyn_dbo_dokTOW`;\n    let dokumentyCount = 0;\n    try {\n      const { results: drows } = await db\n        .prepare(`SELECT COUNT(*) AS cnt FROM \"${dokTable}\"`)\n        .all();\n      dokumentyCount = (drows && drows.length) ? drows[0].cnt : 0;\n    } catch (_) {}\n\n    companies.push({\n      db_name: dbName,\n      nazwa: frows[0].NAZWA,\n      nip: frows[0].NIP,\n      regon: frows[0].REGON,\n      miasto,\n      ulica,\n      kod,\n      kontrahenci_count: kontrahenciCount,\n      dokumenty_count: dokumentyCount\n    });\n  }\n\n  return companies;\n}\n\nfunction jsonResponse(data, status = 200, headers = {}) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: { 'Content-Type': 'application/json', ...headers }\n  });\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/rafalfurmaga/Downloads/kancelaria-faktury/DB-SOURCE/cloudflare-worker/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/rafalfurmaga/.nvm/versions/node/v23.6.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\n\n\t\t\t\texport * from \"/Users/rafalfurmaga/Downloads/kancelaria-faktury/DB-SOURCE/cloudflare-worker/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/rafalfurmaga/Downloads/kancelaria-faktury/DB-SOURCE/cloudflare-worker/.wrangler/tmp/bundle-4nNZvF/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/rafalfurmaga/.nvm/versions/node/v23.6.0/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/rafalfurmaga/Downloads/kancelaria-faktury/DB-SOURCE/cloudflare-worker/.wrangler/tmp/bundle-4nNZvF/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/rafalfurmaga/Downloads/kancelaria-faktury/DB-SOURCE/cloudflare-worker/.wrangler/tmp/bundle-4nNZvF/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
